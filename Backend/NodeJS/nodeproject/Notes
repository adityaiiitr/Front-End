Nodejs
    Backend development
        -> Server Side
        -> Javascript, python php,java, etc.... - any one of these programming language can be used to build a application
        -> FrontEnd(Browser) -> user access the browser and performs some action = a request is created and sent to the back end - in the back end we have created some logic which will be executed generating a result = this result is provided to the browser as a response.

what is Nodejs?
    => Ryan introduced Nodejs
    => Nodejs was a server 
    => Nodejs is a runtime environment where JS can be executed
    => chrome's V8 Engine - Google Company
        microsoft Edge - Charkha
        firefox - Spidermonkey

    Before Nodejs came into existense JS was functioning synchronously
     Ryan = V8 Engine + Code(implement JS Asynchronously) = NodeJS

     NodeJS has the capacity to execute JS Asynchronously

----- Install NodeJS -----

     In CMD check if it is installed properly
     node --version
     npm --version

NPM
     => It is a tool which is a part of Node software
     => it stands for node package manager
     => Th npm tool manages all the packages on behalf of Node 
        packages- dependencies/libraries/modules, etc...

Create a Node Project
    in CMD
    npm init - used to create  a node
    or
    npm init -y  => it will automatically create a node  with default values

    node index.js => it runs the script file inside package.json


package.json
     => this file is created whenever we try to createa node project. it has two types of data
     1. Information based data - info
     2. Functinal data - functional value

Single Threaded & Multi Threaded 
     Single Threaded 
        => a single threaded /process/task is created or executed at once
        => serial process
        => Time Consuming
        => Deadlock is not at all possible
     
    Multi Threaded 
        => a multi threaded /process/task is created or executed at once
        => parallel process
        => faster compared to single threaded
        => DeadLock is possible

Import & Export
ES5 - Nodejs
const abc = require("dependencies_name")
export.default =abc

    To use ES6 import & export syntax in Node we just have to add a key value pair inside the package.json file
        "type":"module"

ES6 - Reactjs
import abc from 'dependencies_name'
export default abc


Modules 
    => Packages/Dependencies/Function etc.
    Types - 3 Different types of modules are presnt namely
    1. Core Modules 
        - These Modules are part of Nodejs
        - These modules are predefined/inbult in Nodejs

    2. User Defined Modules
        -these modules are created by the user /Developer

    3. MPM Managed Modules
        - these modules are manged by npm tool

    Core Modules
        OS - operating system - using this modules we can get information about operating system

        FS - File System - Using this module you can manage the life cycle(read,delete,updating,etc....) of a file.

        HTTP - hypertext transfer protocol - using this module you can create server

        Buffer - Memory Optimization 

        processargv - used to capture the argument that are passed during the run time

        path - used to read URL
        etc....

    User Defined Modules
        -> create another js file called as arithematic
        -> Inside this file create 4 different methods adds, sub,mul and div
        -> lets import this module/file into index.js
        
        exports.myAdd = function (a, b) {
        return a + b
        }

        var user = require('./arithematic')
        console.log(user.myAdd(1, 2))

    NPM managed Modules

        1. nodeman => It is a package which will automatically execute a node project whnever the user saves the file within the project 

            npm install nodemon
            npm install -g nodemon (it install this module to your own modules)

             "start": "node index.js" --Add this to package.json

            Node_modules folders - package-lock.json file

        2.Chalk => It is a package which will implemnt different colors to the data displayed in the console
            npm install chalk


Local vs Global Package

    Local Package
        => Every Project is downloaded only once and it is shared by every projects 
        =>Memory urtilizations is more
        => Managing or management of the package is very difficult
        =>Whenever the project is converted into package then it will also carry all the information about the local package that was downloaded

    Global Package
        => The Package is downloaded only once and it is shared by every project 
        => Memory urtilizations is less
        => Managing or management of the package is very easy 
        =>Whenever the project is converted into package then it will not carry all the information about the local package that was downloaded

Postman
    What?
    => It is a software/tool
    => This tool/software is uded to manage the entire life cycle of a API.


API
    Application Programming Interface
    => It is layer which accepts the request for Data and provides data as a response

                Browser      API           Server
        
                Browsers send requests>>>  and receive    <<<response 
        
        HTTP Protocol
        request - HTTP Message
        response - HTML Document

        SOAP Protocol
        request -  SOAP Message(WSDL File)
        response - XML

    REST API - Stateless Protocol - Architecture
    req - URL / API / REST API / etc...
    res - JSON Documnet or any Other Data that is Supported.

    ex placeholderapi, reqres api

REST API / RESTFul Web Service/REST WEB SEVICE
    => It is a Web Service which is build using REST ARCHITECTURE
    => REST ARCHITECTURE - It is a achitecture where the browser and the server wil;l be Connected using REST API
    => REST API -  It is implemented using using REST Architecture - A Stateless protocol

    Stateful Protocol
    - HTTP
    - SOAP
    - There is a connection between the browser and the server all the time.

    Stateless Protocol
    - Rest Architecture
    - There is no connection at all. Only when the req is made a connection is created that too to get the data. Once the data is responded the connection cuts/stops
        Rest ARCHITECTURE
            req- API/URL
            res - JSON Object
    
    REST Architecture is dervide from HTTP Protocol

    HTTP Methods - CRUD Operation
    Create -- POST
    Read -- GET
    Update -- PUT/PATCH
    Delete -- DELETE
        LINK, UNLINK, HEAD, etc

        Req is made up of a REST Message
        {
            header
                data
            body
                url
        }

        Whenever someone Create API they will create a API Documentation In this Documentation they would have listed what to do and how.....  https://www.programmableweb.com/

    HTTP Status Code  https://http.cat/  or https://httpstatusdogs.com/

    1 - Information Status of your Request

    2 - The Request Was successfully executed
            200 Ok 201 CREATED
    3 - The Request Was Redirected
            301 - Redirection
    4 - Client Side Errors, the request failed due to the problems at browser side
            400 Bad Request
            404 Not Found
            429 Too Many Request
    5 - Server Side Errors, The request failed due to the problems at server side
        500 Internal Server Error 502 Bad Gateway

API
    => It is your URL.
    => By hitting or by making request to a url you  will get the data as a response.

    Can We Pass data using API -  4 diff approaches
    1. Query Paramenter

        syntax: URL?key=value
                or
                URL?key=value&key=value&key=value

        - https://jsonplaceholder.typicode.com/albums

    2. URI Parameters
        syntax: URI/Value

        Internally Inside The server
        syntax: URI/:key

        https://jsonplaceholder.typicode.com/albums/50
        Internally Linked Below
        https://jsonplaceholder.typicode.com/albums/:id

    3. Request Body
        Syntax: Inside the body you send data
        JSON is supported
    4. Request Header
    5. Hard Coded Approach
       

EXPRESS JS
    What 
    => It is a framework that is used or built on top of Node.

    Why
    => If you writing 100 lines of code using Nodejs, the same task we can do it by jusrt using 10 opr 20 lines of code.
    How to install?
    creating the server in Express - client and server connection

Routing
    => It is a end point which when triggered will give a response back
    => Every end point will have the different respoonse
    => /for / /aditya etc

EJS
   
    why?
    => We want to embed the html document inside javascript.

    What?
    => Embedded javascript template
    => it will help us embed the javascipt code into a template language and then this template language is converted into html.

    FLOW
    JS Code - template lang - HTML

    How to use EJS with NodeJS
    Simple Demo Using EJS

Database
    => Database - Collection of data which can be fetched/retrieved insert, delete, etc. and all these are done in a efficient manner

    Database Managemnt System
    - The DBMS is a software or a tool which is used to manage the database.
    eg: MySQL, Oracle, SQL, MongoDB

    What kind of managing does the DBMS provide?
        insert the data 
        define the data model 
        fetch the data 
        perform a copy of the data  - backup etc

    Database are of two types, But we are focusing on only two types namely

    Relatonal Database
    Non Relational Database
    Cloud Based database
    Object Oriented Datbase
    Hierarchial Database

    Relational databse
    => The data is stored in a tabular format - table format
        eg: MySQL, Oracle, SQL

    Non-relational database
    => The data is stored in a distributed format.
    => Different types of distributed format are available :
        1. Key Value Pair
            eg: DynamoDB, CouhBase
        2. Document Based Format
            eg: MongoDB
        3. Graph Database
            eg: Neo4j, etc
        4. Column/Wide Column Based Format
            eg: Apache Cassandra

    => The software is called as NRDBMS/NoSQL

MongoDB
    => It is a document based NoSQL Database
    => It is a open source software.
    => The data is arranged in the form of Document

Terminology in MongoDB
    -> databse - storage of data
    -> collection - group of data
    -> document - single record

    MySQL               MongoDB
    Database            database
    table               Collection
    Record/Tuple/Row    Document
    Column              Field
    Custom Primary ID   No Custom Primary ID (The MongoDB itself generates teh ID)
    Structeured Query lang      Predifined Function/Methods also the Promise Concept

    MongoDB ID (MongoDB Object Id)
    => These object ID is a 12 Byte Data which is unique in nature
    _id : ____12 Byte Code____

    -> there are 24 chaarcter value
    8 Character = 4 Bytes - Represnt the time
    6 Character = 3 Bytes - represent the machine id
    4 charcters = 2 bytes - represent the process id
    6 characters = 3 bytes - represent the counter value which is random


    Download and Install mongoDB 
    https://www.mongodb.com/try/download/community

    Click On the msi file
    Do not select anything keep the default setting as it is
    selct complete option 
    Then keep selecting next finally click on install

    This MSI File has installed 3 major things for us-
        1. MongoDB Server
            - this is the database
            - It is here where the data is present

        2. MongoDB Shell
            - It is used to communicate with the server 
            - it is not interactive
            - it is not user friendly
            - it is not suitable for beginner

        3. MongoDB Compass
            - it is used to communicate with the server
            - it is an interactive user friendly graphical interface.
            
    Basic Commands in MongoDB
        1. use database_name - a Datbase with the name database_name is created and this databasse is selected automatically

        2. Delete Database
            db.dropDatabse() - Deleet the database which is currently selected.

        3. Display all the databse available in the server
            show.dbs
        
        4. Create a collection
            db.createCollection(name_of_the_collection)

        # Single Databse can have multiple Collection

        5. Delete a Collection
            db.name_of_the_collection.drop()


    CRUD OPERATION              MongoDB Method Name
        Create -                insert/insertOne/insertMany
            => db.name_of_the_collection.insert()

        Read -                  find/findOne
            => db.name_of_the_collection.find()

        Update -                update/updateOne/updateMany , $set used to provide new data, findOneAndUpdate
            => db.name_of_the_collection.update({data_for_the_record},{$set:{new_data}})

        Delete -                delete/deleteOne/deleteMany, findOneAndDelete, remove method is depricated
            => db.name_of_the_collection.update({data_for_the_record})

    Sort Method
    => sort the data in ascending or descending order
    => db.name_of_the_collection.find().sort({field_name:1}) - ascending order
    => db.name_of_the_collection.find().sort({field_name: -1}) - descending order

    limit method
    => db.name_of_the_collection.find().limit(5) //only 5 records will be visible

    2 Approaches can be used
        1. Using the HTE compass gui
        2. using the shell

Sample JSON Object

    {
        "id":1,
        "Name":"Aditya Mishra",
        "Designation" : "OWNER ShoutToLearn",
        "Skillset":["Mean","MERN","DJANGO"],
        "Salary":1000
    }
    // Two Objects
    [
        {
        "id":1,
        "Name":"Andhi Toofan",
        "Designation" : "OWNER ICSEHUB",
        "Skillset":["Mean","MERN","DJANGO"],
        "Salary":1000   
        },
        {
        "id":2,
        "Name":"Sumit Singh",
        "Designation" : "OWNER ISCZone",
        "Skillset":["Mean","MERN","DJANGO"],
        "Salary":1000 
        }
    ]


STEPS TO FOLLOW

1. OPEN COMPASS GUI
2. MONGO BASH
3. use batch45
4. db.createCollection("collection45")
   
5. db.collection45.insertOne( {
        "id":1,
        "Name":"Aditya Mishra",
        "Designation" : "OWNER ShoutToLearn",
        "Skillset":["Mean","MERN","DJANGO"],
        "Salary":1000
    })

6. db.collection45.insertMany(  [
        {
        "id":1,
        "Name":"Andhi Toofan",
        "Designation" : "OWNER ICSEHUB",
        "Skillset":["Mean","MERN","DJANGO"],
        "Salary":1000   
        },
        {
        "id":2,
        "Name":"Sumit Singh",
        "Designation" : "OWNER ISCZone",
        "Skillset":["Mean","MERN","DJANGO"],
        "Salary":1000 
        }
    ])

7. db.collection45.find()
8. db.collection45.find({"Name":"Aditya Mishra"})

AND OR Operation
    AND in MOngoDB is represented by  $and key
    OR in MOngoDB is represented by  $or key

9. db.collection45.find({$and: [{"Name":"Aditya Mishra"},{"Skillset":"MERN"}]})
10. db.collection45.find({$or: [{"Name":"Aditya Mishra"},{"Skillset":"MERN"}]})

Relational Operation
    == $eq key
    != $ne key
    >  $gt key
    <  $lt key
    >= $gte key
    <= $lte key

11. db.collection45.find({"Salary":{"$gt":100}})

To Add Multiple Relational Objects

12. db.collection45.find({$and:[{"Salary":{"$gt":100}},{"Salary":{"$lte":1000}}]})

|| UPDATE ||

13. db.collection45.update({"Name":"Aditya Mishra"},{$set:{"Name":"Mystic Arhism"}})
14. db.collection45.update({"Name":"Andhi Toofan"},{$set:{"id":2}})

|| DELETE ||

15. db.collection45.deleteOne({"Name":"Andhi Toofan"}) - This particular Documnet is deleted
16. db.collection45.deleteOne({}) - First Document is Deleted
17. db.collection45.deleteMany({}) - All Documents is Deleted/Truncate

|| SORT ||

18. db.collection45.find().sort({"Salary": 1}) - ascending Order
19. db.collection45.find().sort({"Salary": -1}) - descending Order

|| LIMIT Method ||

20. db.collection45.find().limit(1) - Prints First Data

CERTAIN CASES
    1. Person With Highest/Lowest Salary

21. db.collection45.find().sort({"Salary": -1}).limit(1)
    (3 document - sorted descending - printed first) => Got The Highest salary

22. db.collection45.find().sort({"Salary": 1}).limit(1)
    (3 document - sorted ascending - printed first) => Got The Lowest salary

    2. Person With Second Highest/Lowest Salary 

23. db.collection45.find().sort({"Salary": -1}).skip(1).limit(1)
    (3 document - sorted descending -skipped First -  printed first) => Got The Second Highest salary

24. db.collection45.find().sort({"Salary": -1}).skip(1).limit(1)
    (3 document - sorted ascending -skipped First -  printed first) => Got The Second Lowest salary

    3. Persons With Highest And Lowest salary
    => Cant Get 2 Documents when Limit is Unknown


//DIY 

|| Count Method ||

|| findById Method ||

--------------MONGO DB COMPLETED---------------